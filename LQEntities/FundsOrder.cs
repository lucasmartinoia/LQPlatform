using INOM.Support;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Reflection;

namespace INOM.Entities
{
    public class FundsOrder
    {
        /// <summary>
        /// Market order ID.
        /// Inherited from MarketOrder (1 to 1 relationship).
        /// </summary>
        [Key]
        public int FundsOrderID { get; set; }

        public int? OrderNumber { get; set; }
        /// <summary>
        /// Market order ID.
        /// Inherited from MarketOrder (1 to 1 relationship).
        /// </summary>
        public int MarketOrderID { get; set; }

        /// <summary>
        /// Market order.
        /// </summary>
        [Required]
        public virtual MarketOrder MarketOrder { get; set; }

        /// <summary>
        /// Order type: S = Suscription; R = Rescue.
        /// </summary>
        [StringLength(1)]
        public string OrderType { get; set; }

        /// <summary>
        /// Nombre del atributo en PRODUCT_CODE de Calypso ("BG_Fund_Id")
        /// </summary>
        [StringLength(50)]
        public string ProductCodeType { get; set; }

        /// <summary>
        /// Product code.
        /// </summary>
        public string FundID { get; set; }

        /// <summary>
        /// Order execution date (only for scheduled orders execution date could be later than current system date).
        /// </summary>
        public DateTime ExecutionDate { get; set; }

        /// <summary>
        /// Rescue type: P = Partial or T = Total.
        /// </summary>
        [StringLength(1)]
        public string RescueType { get; set; }

        /// <summary>
        /// Fund "Cuotapartes".
        /// </summary>
        public decimal? Shares { get; set; }

        /// <summary>
        /// Amount to be invested (suscription) or to be rescued (rescue).
        /// </summary>
        public decimal Amount { get; set; }

        /// <summary>
        /// Amount currency.
        /// </summary>
        [StringLength(5)]
        public string Currency { get; set; }

        /// <summary>
        /// Indicates if the order is to be executed today or in the future.
        /// </summary>
        public bool Scheduled { get; set; }

        /// <summary>
        /// Order generated by migration process and not by InomCore.
        /// </summary>
        public int OnlyMigration { get; set; }

        /// <summary>
        /// Custody account to operate.
        /// </summary>
        [StringLength(30)]
        public string CustodyAccountNo { get; set; }

        /// <summary>
        /// Prenote number from SAP.
        /// ID of account money reservation done in SAP for this order.
        /// </summary>
        public string Prenote { get; set; }

        /// <summary>
        /// Order Input Mode : I = Importe, C = Cuotapartes
        /// </summary>
        public string OrderInputMode { get; set; }

        /// <summary>
        /// Exchange rate to make the currency exchange operation in BO.
        /// </summary>
        public float ExchangeRate { get; set; }

        public string OperationsStockTicket { get; set; }

        //----------------------------

        /// <summary>
        /// Funds Trades generated to satisfy this Funds Order.
        /// </summary>
        public virtual List<FundsTrade> FundsTrades { get; set; }

        public DateTime LastUpdate { get; set; }

        public static void Save(FundsOrder fundOrder)
        {
            using (var db = new DBContext())
            {
                db.FundsOrders.Add(fundOrder);
                db.SaveChanges();
            }
        }

        /// <summary>
        /// Price unit.
        /// </summary>
        public double Price { get; set; }

        /// <summary>
        /// Prices the order using last labor day price from Calypso
        /// </summary>
        /// <returns>True on success</returns>
        public bool Pricing()
        {
            bool bReturn = false;
            string sMessage = "";
            string sCode = "";
            //DateTime? dtPrevDay = null;
            string sActDay = "";
            OrderFund oOrderFund = null;
            CalypsoInstrument oCalypsoInstrument = null; 

            this.Price = 0;

            try
            {
                oOrderFund = Retrieve.GetOrderIDFromMarketID(this.MarketOrderID);

                if(oOrderFund.ChannelID=="MCS")
                {
                    oCalypsoInstrument = CalypsoInstrument.GetCalypsoInstrumentByCode(this.FundID);
                }
                else
                {
                    oCalypsoInstrument = CalypsoInstrument.GetCalypsoInstrument(int.Parse(this.FundID));
                }

                if (oCalypsoInstrument != null)
                {
                    //dtPrevDay = CalendarVerifyDate.GetLaborDate(iFundID, -1);
                    //sPrevDay = String.Format("{0:dd/MM/yyyy}", dtPrevDay);

                    sActDay = String.Format("{0:yyyy-MM-dd}", DateTime.Now.Date);
                    
                    string lastUpdateDate = Retrieve.GetParameterValue(Parameter.C_LAST_UPDATE_INSTRUMENTS).Value;

                    if (lastUpdateDate == sActDay)
                    {
                        this.Price = double.Parse(oCalypsoInstrument.Precio);
                        bReturn = true;
                    }
                }

                if (this.Price == 0)
                {
                    sMessage = LogError.ReadErrorDescription(EnumErrorCode.OMS0021.ToString());
                    sCode = EnumErrorCode.OMS0021.ToString();

                    int iOrderId = 0;

                    if (oOrderFund != null)
                    {
                        iOrderId = oOrderFund.OrderID;
                    }

                    ErrorLog.Save(iOrderId, Assembly.GetEntryAssembly().GetName().Name, sMessage, sCode, null, null, this.MarketOrderID, 0, 0);
                    bReturn = false;
                }
            }
            catch(Exception ex)
            {
                int iOrderId = 0;

                if(oOrderFund!=null)
                {
                    iOrderId = oOrderFund.OrderID;
                }  

                ErrorLog.Save(iOrderId, Assembly.GetEntryAssembly().GetName().Name, LogError.ReadErrorDescription(EnumErrorCode.OMS9999.ToString()), EnumErrorCode.OMS9999, ex, "Pricing(FundsOrder);", this.MarketOrderID, 0);
                bReturn = false;
            }

            return (bReturn);
        }
    }
}

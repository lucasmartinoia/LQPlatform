using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;

namespace INOM.Entities
{
    public abstract class Order
    {
        /// <summary>
        /// OMS Order ID: always will be empty.
        /// </summary>
        [Key]
        public int OrderID { get; set; }

        /// <summary>
        /// Order type:  = Suscription; R = Rescue.
        /// </summary>
        [StringLength(20)]
        public string OrderType { get; set; }

        public int? OrderNumber { get; set; }
        /// <summary>
        /// Broker.
        /// </summary>
        [Required]
        //   public Broker Broker { get; set; }
        public string BrokerID { get; set; }
        public virtual Broker Broker { get; set; }

        /// <summary>
        /// Nombre del atributo en PRODUCT_CODE de Calypso ("BG_Fund_Id")
        /// </summary>
        [StringLength(50)]
        public string ProductCodeType { get; set; }

        /// <summary>
        /// Broker channel: to identify where the order was inputed.
        /// </summary>
        [StringLength(50)]
        public string ChannelID { get; set; }
        
        /// <summary>
        /// Broker operator: order input user.
        /// </summary>
        [Required]
        [StringLength(50)]
        public string OperatorID { get; set; }

        /// <summary>
        /// Authorizer operator: order authorization user.
        /// </summary>
        [StringLength(50)]
        public string AuthorizerID { get; set; }

        /// <summary>
        /// Client who has required the order.
        /// </summary>
        [Required]
        [StringLength(50)]
        public string ClientID { get; set; }
        
        /// <summary>
        /// Input order date and time.
        /// </summary>
        public DateTime OrderDateTime { get; set; }
        
        /// <summary>
        /// Order action to be executed: N = New order; A = Amend an existent order; C = Cancel an existent order.
        /// For amend and cancelation the OrderID is required.
        /// </summary>
        [StringLength(10)]
        public string Action { get; set; }

        [Required]
        public string Discriminator { get; set; }
        /// <summary>
        /// Indicates if the order was confirmed by the operator or not.
        /// Only confirmed orders should be accepted by OMS else its have to reject it.
        /// </summary>
        [NotMapped]
        public Boolean Confirmed { get; set; }

        /// <summary>
        /// Indica el tipo de producto ("Fondos")
        /// </summary>
        [StringLength(50)]
        public string ProductType { get; set; }

        /// <summary>
        /// Date and time of last order update.
        /// </summary>
        public DateTime LastUpdate { get; set; }
        
        /// <summary>
        /// Order comments.
        /// </summary>
        [StringLength(200)]
        public string Comments { get; set; }
        
        /// <summary>
        /// Order Status: P = Pending completion, A = Canceled, C = Completed, E = Error.
        /// </summary>
        [StringLength(1)]
        public string Status { get; set; }

        /// <summary>
        /// Used to link two orders: have to be completed when action = Cancel to indicate ID of OMS Order to be canceled. 
        /// </summary>
        public int LinkOrderID { get; set; }

        /// <summary>
        /// Order generated by migration process and not by InomCore.
        /// </summary>
        public int OnlyMigration { get; set; }

        /// <summary>
        /// Order generated in Back Office (Calypso) by user (Contingency) or by process (Automatically).
        /// </summary>
        public bool? BackOfficeInput { get; set; }

        /// <summary>
        /// Back Office Trade ID
        /// </summary>
        public int? BackOfficeInputID { get; set; }

        /// <summary>
        /// Instruction ID which generated this order.
        /// </summary>
        public int? InstructionID { get; set; }

        /// <summary>
        /// True indicates that the recycle process applies for this order.
        /// </summary>
        public bool RecycleActive
        {
            get
            {
                return false;
            }
            set { }
        }

        /// <summary>
        /// Recycle frequency in minutes.
        /// </summary>
        public int? RecycleFrequence { get; set; }

        /// <summary>
        /// Recycle limit time with format "HH:mm".
        /// </summary>
        public string RecycleLimitTime { get; set; }

        /// <summary>
        /// Price unit.
        /// </summary>
        public double? Price { get; set; }

        /// <summary>
        /// Quantity of Shares (Cuotapartes for Funds Market) or Nominals
        /// </summary>
        public decimal? Shares { get; set; }

        /// <summary>
        /// Amount to be invested (suscription) or to be rescued (rescue).
        /// </summary>
        public decimal Amount { get; set; }

        /// <summary>
        /// Amount currency.
        /// </summary>
        [StringLength(5)]
        public string Currency { get; set; }

        /// <summary>
        /// Custody account to operate.
        /// </summary>
        [StringLength(30)]
        public string CustodyAccountNo { get; set; }

        /// <summary>
        /// Prenote number from SAP.
        /// ID of account money reservation done in SAP for this order.
        /// </summary>
        public string Prenote { get; set; }

        /// <summary>
        /// Exchange rate to make the currency exchange operation in BO.
        /// </summary>
       // private float exchangeRate;
        public float ExchangeRate { get; set; }

        /// <summary>
        /// Stock operations is the system used to get a exchange rate (Utilizado para Moneda Cruzada).
        /// </summary>
        public string OperationsStockTicket { get; set; }

        /// <summary>
        /// External order ID: order id from channel or ACDI.
        /// </summary>
        public int ExternalReference { get; set; }

        /// <summary>
        /// Indicates if the order is to be executed today or in the future.
        /// </summary>
        public bool? Scheduled { get; set; }

        /// <summary>
        /// Order execution date (only for scheduled orders execution date could be later than current system date).
        /// </summary>
        public DateTime? ExecutionDate { get; set; }

        /// <summary>
        /// Indica si la orden es por un oficio judicial
        /// </summary>
        public bool? OfficialLetter { get; set; }

        /// <summary>
        /// Número de oficio judicial.
        /// </summary>
        public int? OfficialLetterNo { get; set; }


        /// <summary>
        /// Instruction which the order belongs to. (only used when an order is generated by an instruction).
        /// </summary>
        public virtual Instruction Instruction { get; set; }

        /// <summary>
        /// Market orders generated for this order.
        /// </summary>
        public virtual List<MarketOrder> MarketOrders { get; set; }

        /// <summary>
        /// Status of the messaging sent/received to/from Calypso. Used for recovery from INOM Monitor service. 
        /// </summary>
        public virtual List<CalypsoResponse> CalypsoResponses { get; set; }

        /// <summary>
        /// Receipts (Comprobantes) associated to this order.
        /// </summary>
        public virtual List<Receipt> Receipts { get; set; }

        /// <summary>
        /// Receipts associated to the order.
        /// </summary>
        public virtual List<OrderToReceipt> OrderToReceipt { get; set; }

        /// <summary>
        /// Settlements (Instrucciones de liquidacion de la orden).
        /// </summary>
        public virtual List<Settlement> Settlements { get; set; }

        /// <summary>
        /// Errors associated to the order.
        /// </summary>
        public virtual List<ErrorLog> ErrorLogs { get; set; }

        /// <summary>
        /// Orders sent to BT.
        /// </summary>
        public virtual List<OrderToBT> OrdersToBT { get; set; }

        ///// <summary>
        ///// 
        ///// </summary>
        //public virtual List<OrderToBT> OrdersToBT { get; set; }

        /// <summary>
        /// Bonuses applying to the order.
        /// </summary>
        public virtual List<Bonus> Bonuses { get; set; }
    }
}

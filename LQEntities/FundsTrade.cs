using Microsoft.EntityFrameworkCore;
using Newtonsoft.Json;
using System;
using System.ComponentModel.DataAnnotations;

namespace INOM.Entities
{
    [JsonObject(IsReference = true)]
    public class FundsTrade
    {
        /// <summary>
        /// Market trade ID.
        /// One sequence for all OMS market trades. To be considerated in new market implementation.
        /// </summary>
        [Key]
        public int MarketTradeID { get; set; }

        public int? OrderNumber { get; set; }
        /// <summary>
        /// Market order ID.
        /// </summary>
        public int MarketOrderID { get; set; }
        public int FundsOrderID { get; set; }
        ///// <summary>
        ///// Funds order ID.
        ///// </summary>
        //public int FundsOrderID { get; set; }
        /// <summary>
        /// Fund order.
        /// </summary>
        public FundsOrder FundsOrder { get; set; }

        /// <summary>
        /// Market Trade Status: related to Market.
        /// </summary>
        public string Status { get; set; }
        /// <summary>
        /// Back Office Trade Communication Status: S = Sent, E = Error, C = Completed.
        /// </summary>
        [StringLength(1)]
        public string BackOfficeCommStatus { get; set; }
        /// <summary>
        /// Calypso Trade ID.
        /// </summary>
        public int? BackOfficeTradeID { get; set; }

        /// <summary>
        /// Order type: S = Suscription; R = Rescue.
        /// </summary>
        [StringLength(1)]
        public string OrderType { get; set; }

        /// <summary>
        /// Nombre del atributo en PRODUCT_CODE de Calypso ("BG_Fund_Id")
        /// </summary>
        [StringLength(50)]
        public string ProductCodeType { get; set; }
        /// <summary>
        /// Product code.
        /// </summary>
        public string FundID { get; set; }

        /// <summary>
        /// Order execution date (only for scheduled orders execution date could be later than current system date).
        /// </summary>
        public DateTime ExecutionDate { get; set; }

        /// <summary>
        /// Rescue type: P = Partial or T = Total.
        /// </summary>
        [StringLength(1)]
        public string RescueType { get; set; }

        /// <summary>
        /// Fund "Cuotapartes".
        /// </summary>
        public decimal? Shares { get; set; }

        /// <summary>
        /// Amount to be invested (suscription) or to be rescued (rescue).
        /// </summary>
        public decimal Amount { get; set; }

        /// <summary>
        /// Amount currency.
        /// </summary>
        [StringLength(5)]
        public string Currency { get; set; }

        /// <summary>
        /// Indicates if the order is to be executed today or in the future.
        /// </summary>
        public bool Scheduled { get; set; }

        /// <summary>
        /// Order generated by migration process and not by InomCore.
        /// </summary>
        public int OnlyMigration { get; set; }

        /// <summary>
        /// Custody account to operate.
        /// </summary>
        [StringLength(30)]
        public string CustodyAccountNo { get; set; }

        /// <summary>
        /// Exchange rate to make the currency exchange operation in BO.
        /// </summary>
        public float ExchangeRate { get; set; }

        /// <summary>
        /// Prenote number from SAP.
        /// ID of account money reservation done in SAP for this order.
        /// </summary>
        public string Prenote { get; set; }

        /// <summary>
        /// Order Input Mode : I = Importe, C = Cuotapartes
        /// </summary>
        public string OrderInputMode { get; set; }

        //public string SapPrenoteTypeCode { get; set; }
        public string OperationsStockTicket { get; set; }

        //[StringLength(30)]
        //public string MepIssuerBankID { get; set; }

        public DateTime LastUpdate { get; set; }

        //----------------------------
        public static void Save(FundsTrade fundsTrade)
        {
            using (var db = new DBContext())
            {
                db.FundsTrades.Add(fundsTrade);
                db.SaveChanges();
            }
        }
        public static void Update(FundsTrade fundsTrade)
        {
            using (var db = new DBContext())
            {
                db.FundsTrades.Attach(fundsTrade);
                db.Entry(fundsTrade).State = EntityState.Modified;
                db.SaveChanges();
            }
        }

        public static void UpdateStatus(FundsTrade fundsTrade)
        {
            using (var db = new DBContext())
            {
                db.Entry(fundsTrade).Property(x => x.Status).IsModified = true;
                db.Entry(fundsTrade).Property(x => x.LastUpdate).IsModified = true;
                db.SaveChanges();
            }
        }

        public static void UpdateBackOfficeCommStatus(FundsTrade fundsTrade)
        {
            using (var db = new DBContext())
            {
                db.Entry(fundsTrade).Property(x => x.BackOfficeCommStatus).IsModified = true;
                db.Entry(fundsTrade).Property(x => x.LastUpdate).IsModified = true;
                db.SaveChanges();
            }
        }

        /// <summary>
        /// Price unit.
        /// </summary>
        public double Price { get; set; }
    }
}
